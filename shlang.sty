% A collection of commonly used LaTeX macros for writing programming languages.

\ProvidesPackage{shlang}

% TODO: edit required packages
\RequirePackage{mathpartir}
\RequirePackage{stmaryrd}

% Semantic (or valuation) function for denotational semantics.
%
% #1 subscript (optional)
% #2 argument
%
\newcommand*{\sem}[2][{}]{\ensuremath{\seml\,#2\,\semr_{#1}}}
\newcommand*{\seml}{\llbracket}
\newcommand*{\semr}{\rrbracket}

% Syntax / grammar.
%
\newenvironment{syn}
  {\[\begin{array}{rcl@{\quad}l}}
  {\end{array}\]\ignorespacesafterend}

% Evaluation relation for small-step operational semantics.
%
% #1 LHS
% #2 RHS
%
\newcommand*{\eval}[2]{\ensuremath{#1\longmapsto#2}}

% Reflexive, transitive closure of evaluation relation, i.e., small-step
% operational semantics.
%
% #1 LHS
% #2 RHS
%
\newcommand*{\evals}[2]{\ensuremath{#1\overset{\ast}{\longmapsto}#2}}

% Big-step operational semantics.
%
% #1 LHS
% #2 RHS
%
\newcommand*{\evalb}[2]{\ensuremath{#1\Downarrow#2}}

% Typing relation.
%
% #1 term
% #2 type
%
\newcommand*{\typeof}[2]{\ensuremath{#1:#2}}

% Typing relation with context.
%
% #1 context
% #2 term
% #3 type
%
\newcommand*{\typectx}[3]{\ensuremath{#1\,\vdash\,\typeof{#2}{#3}}}

% Substitution.
%
% #1 variable
% #2 term
% #3 scope
%
\newcommand*{\LCsub}[3]{\ensuremath{[#2/#1]\,#3}}

% Lambda abstraction.
%
% #1 bound variable(s)
% #2 type annotation
% #3 body
%
\newcommand*{\LCabs}[3]{\ensuremath{\lambda\,#1:#2\,.\,#3}}

% Function application.
%
% #1 left term
% #2 right term
%
\newcommand*{\LCapp}[2]{\ensuremath{#1\;#2}}
